#
# from fastapi import Depends, FastAPI, HTTPException
# from sqlalchemy.orm import Session
#
# from . import crud, models, schemas
# from .database import SessionLocal, engine
#
# models.Base.metadata.create_all(bind=engine)
# app = FastAPI()
#
#
# from sqlalchemy import create_engine
# SQLALCHEMY_DATABASE_URL = "sqlite:///./test.db"
# engine = create_engine(
#     SQLALCHEMY_DATABASE_URL, connect_args={"check_same_thread": False}
# )
# conn = engine.connect()
#
# #import sqlite3
# #engine = sqlite3.connect("test.db")
# #conn = engine.cursor()
#
#
#
#
#
#
# # Dependency
# def get_db():
#     db = SessionLocal()
#     try:
#         yield db
#     finally:
#         db.close()
#
#
#
#
#
# @app.post("/users/", response_model=schemas.User)
# def create_user(user: schemas.UserCreate, db: Session = Depends(get_db)):
#     db_user = crud.get_user_by_email(db, email=user.email)
#     if db_user:
#         raise HTTPException(status_code=400, detail="Email already registered")
#     return crud.create_user(db=db, user=user)
#
#
# @app.get("/users/", response_model=list[schemas.User])
# def read_users(skip: int = 0, limit: int = 100, db: Session = Depends(get_db)):
#     users = crud.get_users(db, skip=skip, limit=limit)
#     return users
#
#
# @app.get("/users/{user_id}", response_model=schemas.User)
# def read_user(user_id: int, db: Session = Depends(get_db)):
#     db_user = crud.get_user(db, user_id=user_id)
#     if db_user is None:
#         raise HTTPException(status_code=404, detail="User not found")
#     return db_user
#















#
#
# from fastapi import Depends, FastAPI, HTTPException, status
# from fastapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm
# from fastapi.security.oauth2 import OAuth2PasswordRequestForm
#
# #from . import models
# #from . import services
#
#
# #from passlib.context import CryptContext
# from sqlalchemy.orm import Session
# from datetime import datetime, timedelta
#
# # from fastapi import FastAPI, UploadFile, File, Form
# # from fastapi.middleware.cors import CORSMiddleware
# # from databases import Database
#
# # database = Database("sqlite:///test.db")
#
# from sqlalchemy import create_engine
# # from sqlalchemy import select
# # from sqlalchemy.ext.declarative import declarative_base
# # from sqlalchemy.orm import sessionmaker
#
# SQLALCHEMY_DATABASE_URL = "sqlite:///./test.db"
#
# engine = create_engine(
#     SQLALCHEMY_DATABASE_URL, connect_args={"check_same_thread": False}
# )
# conn = engine.connect()
#
#
# #import sqlite3
# #engine = sqlite3.connect("test.db")
# #conn = engine.cursor()
#
#
#
#
# app = FastAPI()
#
# oauth2_scheme = OAuth2PasswordBearer(tokenUrl='login')
# #pwd_context = CryptContext(schemes=['bcrypt'], depracated='auto')
# #models.Base.metadata.create_all(bind=engine)
#
# SECRET_KEY = '[SECRET KEY]'
# ALGORITHM = 'HS256'
# ACCESS_TOKEN_EXPIRE_MINUTES = 30
#
#
#
# @app.get("/")
# def home():
#     return {"message": "Hello World"}
#
#
# @app.get("/write")
# async def write_data():
#     query = "CREATE TABLE users(   ID INTEGER PRIMARY KEY AUTOINCREMENT,   EMAIL NVARCHAR,   PASSWORD NVARCHAR);"
#     conn.execute(query)
#     query = "INSERT INTO users (ID,EMAIL,PASSWORD) VALUES(1,'test@test.de','abc123')"
#     conn.execute(query)
#
#
# @app.get("/test")
# async def fetch_data(id: int):
#     query = "SELECT * FROM users WHERE ID=" + format(str(id)) + " LIMIT 1"
#     result = conn.execute(query)
#     one_row = result.fetchone()
#     return one_row.EMAIL
#
#
# @app.get("/test/")
# async def test(token:str = Depends(oauth2_scheme)):
#     return {'token', token}
#
# # @app.post('/login/{method}')
# # async def login(method: str, form_data: OAuth2PasswordRequestForm = Depends(), db: Session = Depends(get_db), ):
# #     user = services.authenticate_user(form_data.username, form_data.password)
# #     if not user:
# #         raise HTTPException(
# #             status_code=status.HTTP_401_UNAUTHORIZED,
# #             detail="Incorrect username or password",
# #             headers={"WWW-Authenticate": "Bearer"},
# #         )
# #     access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)
# #     access_token = services.create_access_token(
# #         data={"username": user.username, "email": user.email}, expires_delta=access_token_expires
# #     )
# #     return {"access_token": access_token, "token_type": "bearer"}